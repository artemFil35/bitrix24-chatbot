import logging
from typing import Optional, List, Dict
from app import db
from models import KnowledgeBaseArticle


class KnowledgeBaseManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π"""
    
    def __init__(self):
        self.categories = {
            '–æ—Ç–ø—É—Å–∫': ['–æ—Ç–ø—É—Å–∫', '–æ—Ç–≥—É–ª', '–≤—ã—Ö–æ–¥–Ω–æ–π', '–æ—Ç–¥—ã—Ö', 'vacation'],
            '–±–æ–ª—å–Ω–∏—á–Ω—ã–π': ['–±–æ–ª—å–Ω–∏—á–Ω—ã–π', '–±–æ–ª–µ–∑–Ω—å', '–º–µ–¥–∏—Ü–∏–Ω–∞', '–∑–¥–æ—Ä–æ–≤—å–µ', '–ª–µ—á–µ–Ω–∏–µ'],
            '–∑–∞—Ä–ø–ª–∞—Ç–∞': ['–∑–∞—Ä–ø–ª–∞—Ç–∞', '–æ–ø–ª–∞—Ç–∞', '–¥–µ–Ω—å–≥–∏', '–ø—Ä–µ–º–∏—è', '–±–æ–Ω—É—Å'],
            '–¥–æ–∫—É–º–µ–Ω—Ç—ã': ['–¥–æ–∫—É–º–µ–Ω—Ç', '—Å–ø—Ä–∞–≤–∫–∞', '–∑–∞—è–≤–ª–µ–Ω–∏–µ', '–±—É–º–∞–≥–∏'],
            '—Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è': ['–≤—Ä–µ–º—è', '–≥—Ä–∞—Ñ–∏–∫', '—Å–º–µ–Ω–∞', '–æ–ø–æ–∑–¥–∞–Ω–∏–µ', '–ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∞'],
            '–ª—å–≥–æ—Ç—ã': ['–ª—å–≥–æ—Ç–∞', '–∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è', '–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã', '—Å–æ—Ü–ø–∞–∫–µ—Ç'],
            '–æ–±—É—á–µ–Ω–∏–µ': ['–æ–±—É—á–µ–Ω–∏–µ', '–∫—É—Ä—Å—ã', '—Ç—Ä–µ–Ω–∏–Ω–≥', '—Ä–∞–∑–≤–∏—Ç–∏–µ', '–Ω–∞–≤—ã–∫–∏'],
            '–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ': ['–∫–æ–º–ø—å—é—Ç–µ—Ä', '—Ç–µ—Ö–Ω–∏–∫–∞', '–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ', '–Ω–æ—É—Ç–±—É–∫', '—Ç–µ–ª–µ—Ñ–æ–Ω'],
            '–æ—Ñ–∏—Å': ['–æ—Ñ–∏—Å', '—Ä–∞–±–æ—á–µ–µ –º–µ—Å—Ç–æ', '–ø–∞—Ä–∫–æ–≤–∫–∞', '—Å—Ç–æ–ª–æ–≤–∞—è', '–∫—É—Ö–Ω—è'],
            '–∫–æ–ª–ª–µ–≥–∏': ['–∫–æ–ª–ª–µ–≥–∏', '–∫–æ–º–∞–Ω–¥–∞', '—Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏', '—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å', '–Ω–∞—á–∞–ª—å–Ω–∏–∫']
        }
    
    def search_knowledge_base(self, query: str) -> Optional[str]:
        """–ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π –ø–æ –∑–∞–ø—Ä–æ—Å—É"""
        try:
            query_lower = query.lower()
            
            # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö
            exact_match = KnowledgeBaseArticle.query.filter(
                KnowledgeBaseArticle.is_active == True,
                KnowledgeBaseArticle.title.ilike(f'%{query}%')
            ).first()
            
            if exact_match:
                exact_match.usage_count += 1
                db.session.commit()
                return self._format_article_response(exact_match)
            
            # –ò—â–µ–º –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö
            relevant_category = self._find_relevant_category(query_lower)
            if relevant_category:
                articles = KnowledgeBaseArticle.query.filter(
                    KnowledgeBaseArticle.is_active == True,
                    KnowledgeBaseArticle.category == relevant_category
                ).order_by(KnowledgeBaseArticle.usage_count.desc()).limit(3).all()
                
                if articles:
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–∞–º—É—é –ø–æ–ø—É–ª—è—Ä–Ω—É—é —Å—Ç–∞—Ç—å—é –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                    best_article = articles[0]
                    best_article.usage_count += 1
                    db.session.commit()
                    return self._format_article_response(best_article)
            
            # –ò—â–µ–º –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É —Å—Ç–∞—Ç–µ–π
            content_match = KnowledgeBaseArticle.query.filter(
                KnowledgeBaseArticle.is_active == True,
                KnowledgeBaseArticle.content.ilike(f'%{query}%')
            ).order_by(KnowledgeBaseArticle.usage_count.desc()).first()
            
            if content_match:
                content_match.usage_count += 1
                db.session.commit()
                return self._format_article_response(content_match)
            
            # –ò—â–µ–º –ø–æ —Ç–µ–≥–∞–º
            tag_match = KnowledgeBaseArticle.query.filter(
                KnowledgeBaseArticle.is_active == True,
                KnowledgeBaseArticle.tags.ilike(f'%{query}%')
            ).order_by(KnowledgeBaseArticle.usage_count.desc()).first()
            
            if tag_match:
                tag_match.usage_count += 1
                db.session.commit()
                return self._format_article_response(tag_match)
            
            return None
            
        except Exception as e:
            logging.error(f"Error searching knowledge base: {str(e)}")
            return None
    
    def _find_relevant_category(self, query: str) -> Optional[str]:
        """–ü–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º"""
        for category, keywords in self.categories.items():
            for keyword in keywords:
                if keyword in query:
                    return category
        return None
    
    def _format_article_response(self, article: KnowledgeBaseArticle) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –∏–∑ —Å—Ç–∞—Ç—å–∏ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"""
        response = f"üìã **{article.title}**\n\n"
        response += article.content
        
        if article.get_tags_list():
            response += f"\n\nüè∑Ô∏è –¢–µ–≥–∏: {', '.join(article.get_tags_list())}"
        
        response += "\n\nüí° –ï—Å–ª–∏ —É –≤–∞—Å –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ HR-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É."
        
        return response
    
    def get_popular_articles(self, limit: int = 5) -> List[KnowledgeBaseArticle]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π"""
        try:
            return KnowledgeBaseArticle.query.filter_by(
                is_active=True
            ).order_by(
                KnowledgeBaseArticle.usage_count.desc()
            ).limit(limit).all()
            
        except Exception as e:
            logging.error(f"Error getting popular articles: {str(e)}")
            return []
    
    def get_articles_by_category(self, category: str) -> List[KnowledgeBaseArticle]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–µ–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        try:
            return KnowledgeBaseArticle.query.filter(
                KnowledgeBaseArticle.is_active == True,
                KnowledgeBaseArticle.category == category
            ).order_by(
                KnowledgeBaseArticle.usage_count.desc()
            ).all()
            
        except Exception as e:
            logging.error(f"Error getting articles by category: {str(e)}")
            return []
    
    def create_default_articles(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ç–µ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        try:
            default_articles = [
                {
                    'title': '–ö–∞–∫ –æ—Ñ–æ—Ä–º–∏—Ç—å –æ—Ç–ø—É—Å–∫',
                    'content': '''–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –æ—Ç–ø—É—Å–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:

1. –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–ª–µ–Ω–∏–µ –Ω–∞ –æ—Ç–ø—É—Å–∫ –Ω–µ –º–µ–Ω–µ–µ —á–µ–º –∑–∞ 2 –Ω–µ–¥–µ–ª–∏ –¥–æ –ø–ª–∞–Ω–∏—Ä—É–µ–º–æ–π –¥–∞—Ç—ã
2. –°–æ–≥–ª–∞—Å–æ–≤–∞—Ç—å –¥–∞—Ç—ã —Å –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω—ã–º —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–º
3. –ü–µ—Ä–µ–¥–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –¥–µ–ª–∞ –∫–æ–ª–ª–µ–≥–∞–º –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–º–µ—â–∞—é—â–µ–º—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É
4. –£–≤–µ–¥–æ–º–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤ –æ –≤—Ä–µ–º–µ–Ω–Ω–æ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ)

üìù –ó–∞—è–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—É—é —Å–∏—Å—Ç–µ–º—É –∏–ª–∏ –≤ –∫–∞–¥—Ä–æ–≤—É—é —Å–ª—É–∂–±—É.
‚è∞ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ—Ç–ø—É—Å–∫–∞ - 3 –¥–Ω—è.
üìÖ –ï–∂–µ–≥–æ–¥–Ω—ã–π –æ–ø–ª–∞—á–∏–≤–∞–µ–º—ã–π –æ—Ç–ø—É—Å–∫ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 28 –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã—Ö –¥–Ω–µ–π.''',
                    'category': '–æ—Ç–ø—É—Å–∫',
                    'tags': '–æ—Ç–ø—É—Å–∫, –∑–∞—è–≤–ª–µ–Ω–∏–µ, –æ—Ç–¥—ã—Ö, –∫–∞–ª–µ–Ω–¥–∞—Ä—å'
                },
                {
                    'title': '–ü—Ä–æ—Ü–µ–¥—É—Ä–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –±–æ–ª—å–Ω–∏—á–Ω–æ–≥–æ –ª–∏—Å—Ç–∞',
                    'content': '''–ü—Ä–∏ –±–æ–ª–µ–∑–Ω–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:

1. –í –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å –±–æ–ª–µ–∑–Ω–∏ —É–≤–µ–¥–æ–º–∏—Ç—å –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è –¥–æ 10:00
2. –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –≤—Ä–∞—á—É –∏ –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª—å–Ω–∏—á–Ω—ã–π –ª–∏—Å—Ç
3. –í —Ç–µ—á–µ–Ω–∏–µ 3 –¥–Ω–µ–π –ø–æ—Å–ª–µ –≤—ã–∑–¥–æ—Ä–æ–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –±–æ–ª—å–Ω–∏—á–Ω—ã–π –ª–∏—Å—Ç –≤ –∫–∞–¥—Ä–æ–≤—É—é —Å–ª—É–∂–±—É
4. –ó–∞–ø–æ–ª–Ω–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –Ω–µ—Ç—Ä—É–¥–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏

üíä –ë–æ–ª—å–Ω–∏—á–Ω—ã–π –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä—É–¥–æ–≤–æ–º—É –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤—É.
üìã –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ –±–æ–ª—å–Ω–∏—á–Ω—ã–µ –ª–∏—Å—Ç—ã –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è –Ω–∞—Ä–∞–≤–Ω–µ —Å –±—É–º–∞–∂–Ω—ã–º–∏.
‚öïÔ∏è –ü—Ä–∏ –±–æ–ª–µ–∑–Ω–∏ –±–æ–ª–µ–µ 3 –¥–Ω–µ–π –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π —Å–ø—Ä–∞–≤–∫–∏.''',
                    'category': '–±–æ–ª—å–Ω–∏—á–Ω—ã–π',
                    'tags': '–±–æ–ª—å–Ω–∏—á–Ω—ã–π, –±–æ–ª–µ–∑–Ω—å, –º–µ–¥–∏—Ü–∏–Ω–∞, —Å–ø—Ä–∞–≤–∫–∞'
                },
                {
                    'title': '–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏',
                    'content': '''–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–∞–±–æ—á–∏–π –≥—Ä–∞—Ñ–∏–∫:

üïò –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è: 9:00
üïî –û–∫–æ–Ω—á–∞–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è: 18:00
üïê –û–±–µ–¥–µ–Ω–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤: 13:00-14:00
üìÖ –†–∞–±–æ—á–∏–µ –¥–Ω–∏: –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫-–ø—è—Ç–Ω–∏—Ü–∞

–ì–∏–±–∫–∏–π –≥—Ä–∞—Ñ–∏–∫:
- –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –Ω–∞—á–∏–Ω–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å 8:00 –¥–æ 10:00
- –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Å–¥–≤–∏–≥ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è
- –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ –≤ –æ—Ñ–∏—Å–µ —Å 10:00 –¥–æ 16:00

üìù –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –≥—Ä–∞—Ñ–∏–∫–µ —Å–æ–≥–ª–∞—Å–æ–≤—ã–≤–∞—é—Ç—Å—è —Å —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–º.
üè† –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–¥–∞–ª–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã –æ–±—Å—É–∂–¥–∞–µ—Ç—Å—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ.''',
                    'category': '—Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è',
                    'tags': '–≥—Ä–∞—Ñ–∏–∫, –≤—Ä–µ–º—è, —Ä–∞–±–æ—Ç–∞, –æ—Ñ–∏—Å, –≥–∏–±–∫–∏–π –≥—Ä–∞—Ñ–∏–∫'
                },
                {
                    'title': '–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –ª—å–≥–æ—Ç—ã –∏ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏',
                    'content': '''–î–æ—Å—Ç—É–ø–Ω—ã–µ –ª—å–≥–æ—Ç—ã:

üíº –î–ú–° (–¥–æ–±—Ä–æ–≤–æ–ª—å–Ω–æ–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–µ —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ)
üöó –ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤
üçΩÔ∏è –°—É–±—Å–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ –≤ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π —Å—Ç–æ–ª–æ–≤–æ–π
üìö –ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è –æ–±—É—á–µ–Ω–∏—è –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∫—É—Ä—Å–æ–≤
üèãÔ∏è –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —Ñ–∏—Ç–Ω–µ—Å
üéØ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ —Å –±–æ–Ω—É—Å–∞–º–∏

–£—Å–ª–æ–≤–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è:
- –ò—Å–ø—ã—Ç–∞—Ç–µ–ª—å–Ω—ã–π —Å—Ä–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω
- –°—Ç–∞–∂ —Ä–∞–±–æ—Ç—ã –≤ –∫–æ–º–ø–∞–Ω–∏–∏ –æ—Ç 3 –º–µ—Å—è—Ü–µ–≤
- –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞—Ä–Ω—ã—Ö –≤–∑—ã—Å–∫–∞–Ω–∏–π

üìã –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ —É—Ç–æ—á–Ω—è–π—Ç–µ –≤ –∫–∞–¥—Ä–æ–≤–æ–π —Å–ª—É–∂–±–µ.''',
                    'category': '–ª—å–≥–æ—Ç—ã',
                    'tags': '–ª—å–≥–æ—Ç—ã, –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏, –î–ú–°, —Ñ–∏—Ç–Ω–µ—Å, –æ–±—É—á–µ–Ω–∏–µ'
                },
                {
                    'title': '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ IT-–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ',
                    'content': '''–î–ª—è —Ä–µ—à–µ–Ω–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤:

üíª –ó–∞—è–≤–∫–∏ –Ω–∞ IT-–ø–æ–¥–¥–µ—Ä–∂–∫—É –ø–æ–¥–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—É—é —Å–∏—Å—Ç–µ–º—É
üìû –¢–µ–ª–µ—Ñ–æ–Ω —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏: –¥–æ–±. 100
üîß –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏: 9:00-18:00 –≤ —Ä–∞–±–æ—á–∏–µ –¥–Ω–∏

–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ:
- –†–∞–±–æ—á–∏–π –∫–æ–º–ø—å—é—Ç–µ—Ä –∏–ª–∏ –Ω–æ—É—Ç–±—É–∫
- –ú–æ–Ω–∏—Ç–æ—Ä (–ø–æ –∑–∞–ø—Ä–æ—Å—É –≤—Ç–æ—Ä–æ–π)
- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∏ –º—ã—à—å
- –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω (–ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)

‚ö†Ô∏è –õ–∏—á–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ.
üîí –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–æ–±–ª—é–¥–µ–Ω–∏–µ –ø–æ–ª–∏—Ç–∏–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.''',
                    'category': '–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ',
                    'tags': 'IT, –∫–æ–º–ø—å—é—Ç–µ—Ä, —Ç–µ—Ö–Ω–∏–∫–∞, –ø–æ–¥–¥–µ—Ä–∂–∫–∞, –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ'
                }
            ]
            
            for article_data in default_articles:
                existing = KnowledgeBaseArticle.query.filter_by(
                    title=article_data['title']
                ).first()
                
                if not existing:
                    article = KnowledgeBaseArticle(**article_data)
                    db.session.add(article)
            
            db.session.commit()
            logging.info("Default knowledge base articles created")
            
        except Exception as e:
            logging.error(f"Error creating default articles: {str(e)}")
            db.session.rollback()
    
    def search_similar_questions(self, query: str, limit: int = 3) -> List[str]:
        """–ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–æ–∫"""
        try:
            # –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
            query_words = query.lower().split()
            similar_questions = []
            
            # –ü—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —á–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã
            common_questions = [
                "–ö–∞–∫ –æ—Ñ–æ—Ä–º–∏—Ç—å –æ—Ç–ø—É—Å–∫?",
                "–ß—Ç–æ –¥–µ–ª–∞—Ç—å –ø—Ä–∏ –±–æ–ª–µ–∑–Ω–∏?",
                "–ö–∞–∫–æ–π –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã?",
                "–ö–∞–∫–∏–µ –µ—Å—Ç—å –ª—å–≥–æ—Ç—ã?",
                "–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É?",
                "–ì–¥–µ –Ω–∞–π—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã?",
                "–ö–∞–∫ —Å–≤—è–∑–∞—Ç—å—Å—è —Å HR?",
                "–ö–æ–≥–¥–∞ –≤—ã–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è –∑–∞—Ä–ø–ª–∞—Ç–∞?",
                "–ö–∞–∫ –æ—Ñ–æ—Ä–º–∏—Ç—å –∫–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫—É?",
                "–ß—Ç–æ –¥–µ–ª–∞—Ç—å –ø—Ä–∏ –æ–ø–æ–∑–¥–∞–Ω–∏–∏?"
            ]
            
            for question in common_questions:
                question_words = question.lower().split()
                if any(word in question_words for word in query_words):
                    similar_questions.append(question)
                    if len(similar_questions) >= limit:
                        break
            
            return similar_questions
            
        except Exception as e:
            logging.error(f"Error searching similar questions: {str(e)}")
            return []
